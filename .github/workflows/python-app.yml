name: Build and Release .exe

on:
  push:
    branches:
      - '**'

permissions:
  contents: write

jobs:
  build_release:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install pyinstaller PyQt6

    - name: Build executable with PyInstaller
      run: |
        pyinstaller --onefile --windowed main.py
      shell: cmd

    - name: Delete previous release if exists
      shell: pwsh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_REF: ${{ github.ref }}
      run: |
        # Remove "refs/tags/" para obter a tag apenas
        $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
        Write-Host "Tag: $tag"
        try {
          # Tenta obter o release pela tag
          $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases/tags/$tag" -Headers @{Authorization = "token $env:GITHUB_TOKEN"} -Method Get
          if ($release -and $release.id) {
            Write-Host "Deleting release with id $($release.id)"
            # Apaga o release
            Invoke-RestMethod -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY/releases/$($release.id)" -Headers @{Authorization = "token $env:GITHUB_TOKEN"} -Method Delete
          }
        }
        catch {
          Write-Host "No existing release found for tag $tag"
        }


    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v1.0.0"
        release_name: "Release v1.0.0"
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/main.exe
        asset_name: main.exe
        asset_content_type: application/octet-stream
